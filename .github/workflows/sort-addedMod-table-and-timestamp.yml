name: Sort Mods Table and Update Timestamp

on:
  push:
    paths:
      - 'addedMods.md'
  pull_request:
    paths:
      - 'addedMods.md'

jobs:
  sort-and-timestamp:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Fetch latest changes
        run: |
          # Fetch the latest changes from the remote repository
          echo "Fetching latest changes from repository..."
          git pull origin ${GITHUB_REF#refs/heads/}
          
      - name: Create and run sorting script
        run: |
          # Create the Python script
          echo "Creating sorting script..."
          cat > sort_mods_table.py << 'EOF'
          import re
          import os

          def sort_markdown_table(file_path):
              # Read the file content
              with open(file_path, 'r', encoding='utf-8') as file:
                  content = file.read()
              
              # Remove trailing whitespace from each line
              lines = content.split('\n')
              lines = [line.rstrip() for line in lines]
              content = '\n'.join(lines)
              
              # Find the table by splitting at "## Mod List"
              parts = content.split("## Mod List")
              if len(parts) < 2:
                  print("ERROR: Table not found in the format expected")
                  return False
              
              # Keep the header and everything before the table
              header = parts[0] + "## Mod List\n"
              
              # Split the rest at the first occurrence of "---" after the table
              table_and_rest = parts[1].split("\n---", 1)
              
              # Extract the table lines (everything up to the "---")
              table_text = table_and_rest[0].strip()
              table_lines = table_text.split('\n')
              
              # The first two lines are the header and separator
              header_rows = table_lines[0:2]
              content_rows = table_lines[2:] if len(table_lines) > 2 else []
              
              # Count rows before sorting for reporting
              original_count = len(content_rows)
              
              # Filter out any rows that don't have proper table formatting
              valid_content_rows = []
              for i, row in enumerate(content_rows):
                  if row.strip() and row.count('|') >= 3:  # Need at least 3 pipe characters for a valid row
                      valid_content_rows.append(row)
                  else:
                      print(f"WARNING: Skipping invalid row {i+3}: '{row}'")
              
              # Count valid rows for reporting
              valid_count = len(valid_content_rows)
              
              # Sort content rows alphabetically by mod name (first column)
              # Extract the actual mod name, removing Markdown formatting and ignoring comments
              def get_sort_key(row):
                  # Get the mod name cell (second column)
                  cells = row.split('|')
                  if len(cells) <= 1:
                      return ""
                      
                  mod_name_cell = cells[1].strip()
                  
                  # Extract the name from markdown link if present
                  mod_name = re.sub(r'\[([^]]+)\].*', r'\1', mod_name_cell)
                  
                  # Handle special prefix cases like "[Let's Do]"
                  if mod_name.startswith('[') and 'Let\'s Do' in mod_name:
                      # Remove the prefix for sorting purposes
                      mod_name = mod_name.replace('[Let\'s Do]', '').strip()
                  
                  # Handle "The" prefix
                  if mod_name.startswith('The '):
                      mod_name = mod_name[4:]
                      
                  return mod_name.lower()
              
              sorted_rows = sorted(valid_content_rows, key=get_sort_key)
              
              # Reconstruct the table
              sorted_table = '\n'.join(header_rows + sorted_rows)
              
              # Reconstruct the full content
              if len(table_and_rest) > 1:
                  full_content = header + sorted_table + "\n---" + table_and_rest[1]
              else:
                  full_content = header + sorted_table
              
              # Write back to file directly
              with open(file_path, 'w', encoding='utf-8') as file:
                  file.write(full_content)
              
              print(f"SUCCESS: Table sorted and trailing whitespaces removed. Processed {valid_count}/{original_count} rows.")
              return True

          if __name__ == "__main__":
              file_path = "addedMods.md"
              print(f"Processing file: {file_path}")
              print("Removing trailing whitespaces...")
              result = sort_markdown_table(file_path)
              if result:
                  print("Sort operation and whitespace removal completed successfully")
              else:
                  print("Operation failed")
                  exit(1)
          EOF
          
          # Run the script
          echo "Running sorting and whitespace removal script..."
          python sort_mods_table.py
          
      - name: Update timestamp
        run: |
          DATE=$(date '+%B %d, %Y, %H:%M UTC')
          echo "Updating timestamp to: $DATE"
          if grep -q "^### Last updated:" "addedMods.md"; then
            sed -i "s/^### Last updated:.*$/### Last updated: $DATE/" "addedMods.md"
            echo "Updated existing timestamp"
          else
            sed -i "1i### Last updated: $DATE" "addedMods.md"
            echo "Added new timestamp"
          fi
          
      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          
      - name: Commit and push with retry
        run: |
          git add addedMods.md
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          echo "Committing sorted table and timestamp changes..."
          git commit -m "Sort mods table and update timestamp [skip ci]"
          
          # Try pushing with retries for potential conflicts
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          until git push origin ${GITHUB_REF#refs/heads/} || [ $RETRY_COUNT -ge $MAX_RETRIES ]; do
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "Push failed, retrying (Attempt $RETRY_COUNT of $MAX_RETRIES)..."
            git pull --rebase origin ${GITHUB_REF#refs/heads/}
          done
          
          if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
            echo "Failed to push after $MAX_RETRIES attempts, using force push"
            git push --force origin ${GITHUB_REF#refs/heads/}
          else
            echo "Sort and timestamp updates pushed successfully"
          fi